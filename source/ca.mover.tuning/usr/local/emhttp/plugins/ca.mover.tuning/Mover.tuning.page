Menu="Scheduler:2a"
Title="Mover Tuning w/Age - Days Old"
Tag="gear"
---
<?
if ($var['shareCacheEnabled']!='yes') {
  echo "<p class='notice'>Cache disk not enabled!</p>";
} elseif ($var['shareUser']=='-') {
  echo "<p class='notice'>User shares not enabled!</p>";
}
$plugin='ca.mover.tuning';
$cfg = parse_plugin_cfg($plugin);
$cronDisabled = ($cfg['force'] == "no") ? "disabled" : "";
$ageDisabled = ($cfg['age'] == "no") ? "disabled" : "";
$sizefDisabled = ($cfg['sizef'] == "no") ? "disabled" : "";
$sparsnessfDisabled = ($cfg['sparsnessf'] == "no") ? "disabled" : "";
$filetypesfDisabled = ($cfg['filetypesf'] == "no") ? "disabled" : "";
$filelistfDisabled = ($cfg['filelistf'] == "no") ? "disabled" : "";
$omoverthreshDisabled = ($cfg['omovercfg'] == "no") ? "disabled" : "";
$om = $cfg['threshold'];
$om = $om + 5;


?>
<script>
$(function(){
	if ( typeof caPluginUpdateCheck === "function" ) {
		caPluginUpdateCheck("ca.mover.tuning.plg",{name:"Mover Tuning",element:".moverUpdate"});
	}
});
	
$.fn.toggleAttr = function(attr) {
  this.each(function() {
		var $this = $(this);
		$this.attr(attr) ? $this.removeAttr(attr) : $this.attr(attr,true);
	});
}

function updateCron() {
  var cron = $("#cronSchedule").val();
	var cronEnabled = $("#forceCron").val();
	$.post("/plugins/ca.mover.tuning/updateCron.php",{cronEnabled:cronEnabled,cron:cron});
}

function moveNow() {
	$.post("/plugins/ca.mover.tuning/moveNow.php");
}

sizef.toggleAttr("disabled")
sparsnessf.toggleAttr("disabled")
filelistv.toggleAttr("disabled")

</script>
<div class='moverUpdate'></div>
<form markdown="1" method="POST" action="/update.php" target="progressFrame" onsubmit="updateCron();">
<input type="hidden" name="#file" value="<?=$plugin?>/<?=$plugin?>.cfg">
Disable Mover running on a schedule:
: <select name='moverDisabled' size='1' class='narrow'>
<?=mk_option($cfg['moverDisabled'],"no","No")?>
<?=mk_option($cfg['moverDisabled'],"yes","Yes")?>
</select>
*Note that setting this to yes effectively disables this plugin

> This will prevent mover from running at the schedule set in Mover Settings.  You will only be able to run mover by manually invoking it.

Priority for mover process
: <select name='moverNice' size='1' class='narrow'>
<?=mk_option($cfg['moverNice'],"0","Normal")?>
<?=mk_option($cfg['moverNice'],"5","Low")?>
<?=mk_option($cfg['moverNice'],"19","Very Low")?>
</select>

Priority for disk I/O
: <select name='moverIO' size='1' class='narrow'>
<?=mk_option($cfg['moverIO'],"-c 2 -n 0","Normal")?>
<?=mk_option($cfg['moverIO'],"-c 2 -n 7","Low")?>
<?=mk_option($cfg['moverIO'],"-c 3","Idle")?>
</select>

> The above two options set the priority for the mover process.  Setting these options may help with circumstances where when mover runs other applications may pause or buffer.  Note that moving the files may take longer when setting these options

Only move at this threshold of used cache space:
: <select name="threshold" size="1" class='narrow'>
<?for ($t=0;$t<100;$t+=5):?>
<?=mk_option($cfg['threshold'], $t, "$t %")?>
<?endfor;?>
</select>

> Set to the amount of disk space used on the cache drive for mover to run.

Move files off cache based on age?
: <select name="age" size='1' class='narrow' onchange=$(".myage").toggleAttr("disabled")>
       <?=mk_option($cfg['age'],'no','No')?>
       <?=mk_option($cfg['age'],'yes','Yes')?>
</select>

> Select if you want to move files off of the cache based on their age - days old.

Move files that are greater than this many days old:
: <select name="daysold" size="1" class='narrow myage' <?=$ageDisabled?>>
<?=mk_option($cfg['daysold'], 1, "1")?>
<?=mk_option($cfg['daysold'], 2, "2")?>
<?=mk_option($cfg['daysold'], 3, "3")?>
<?=mk_option($cfg['daysold'], 4, "4")?>
<?=mk_option($cfg['daysold'], 5, "5")?>
<?=mk_option($cfg['daysold'], 6, "6")?>
<?=mk_option($cfg['daysold'], 7, "7")?>
<?=mk_option($cfg['daysold'], 8, "8")?>
<?=mk_option($cfg['daysold'], 9, "9")?>
<?for ($dt=10;$dt<770;$dt+=5):?>
<?=mk_option($cfg['daysold'], $dt, "$dt")?>
<?endfor;?>
</select>

> Select the number of days old a file has to be in order to move (Up To 1 year).

Use CTIME:
: <select name="ctime" size='1' class='narrow myage' <?=$ageDisabled?> >
       <?=mk_option($cfg['ctime'],'no','No')?>
       <?=mk_option($cfg['ctime'],'yes','Yes')?>
</select>

> Use CTIME instead of MTIME in the find command.

Move files based on minimum size?
: <select name="sizef" size='1' class='narrow' onchange=$(".mysizef").toggleAttr("disabled")>
       <?=mk_option($cfg['sizef'],'no','No')?>
       <?=mk_option($cfg['sizef'],'yes','Yes')?>
</select>

> Select yes if you want to move files based on the size of the file in M.

Move files that are larger than this size (In M).
: <select name="sizeinM" size="1" class='narrow mysizef' <?=$sizefDisabled?>>
	<?=mk_option($cfg['sizeinM'], 1, "1")?>
	<?=mk_option($cfg['sizeinM'], 2, "2")?>
	<?=mk_option($cfg['sizeinM'], 3, "3")?>
	<?=mk_option($cfg['sizeinM'], 4, "4")?>
	<?=mk_option($cfg['sizeinM'], 5, "5")?>
        <?=mk_option($cfg['sizeinM'], 6, "6")?>
        <?=mk_option($cfg['sizeinM'], 7, "7")?>
        <?=mk_option($cfg['sizeinM'], 8, "8")?>
        <?=mk_option($cfg['sizeinM'], 9, "9")?>
        <?=mk_option($cfg['sizeinM'], 10, "10")?>
        <?=mk_option($cfg['sizeinM'], 11, "11")?>

	<?for ($ds=12;$ds<1026;$ds+=2):?>
		<?=mk_option($cfg['sizeinM'], $ds, "$ds")?>
	<?endfor;?>
</select>

Move files off cache based on sparseness?
: <select name="sparsnessf" size='1' class='narrow' onchange=$(".mysparsnessf").toggleAttr("disabled")>
       <?=mk_option($cfg['sparsnessf'],'no','No')?>
       <?=mk_option($cfg['sparsnessf'],'yes','Yes')?>
</select>

> Select the sparseness size.  Any file with a sparseness larger will be moved.

Move files that are greather than this sparseness:
: <select name="sparsnessv" size="1" class='narrow mysparsnessf' <?=$sparsnessfDisabled?>>
	<?=mk_option($cfg['sparsnessv'], 1, ".1")?>
	<?=mk_option($cfg['sparsnessv'], 2, ".2")?>
	<?=mk_option($cfg['sparsnessv'], 3, ".3")?>
	<?=mk_option($cfg['sparsnessv'], 4, ".4")?>
	<?=mk_option($cfg['sparsnessv'], 5, ".5")?>
	<?=mk_option($cfg['sparsnessv'], 6, ".6")?>
	<?=mk_option($cfg['sparsnessv'], 7, ".7")?>
	<?=mk_option($cfg['sparsnessv'], 8, ".8")?>
	<?=mk_option($cfg['sparsnessv'], 9, ".9")?>
</select>

> Select the sparseness size greater than that will be moved.


Ignore files listed inside of a text file:
: <select name='filelistf' size='1' class='narrow' onchange=$(".myfilelistf").toggleAttr("disabled");>
<?=mk_option($cfg['filelistf'],"no",'No')?>
<?=mk_option($cfg['filelistf'],"yes","Yes")?>
</select>

File list path:
: <input type='text' name='filelistv' size='1' class='narrow myfilelistf' <?=$filelistfDisabled?> value='<?=$cfg['filelistv']?>'>

> Full path to a file that contains a list of files you want ignored from being moved off the cache pool.


Ignore file types:
: <select name='filetypesf' size='1' class='narrow' onchange=$(".myfiletypesf").toggleAttr("disabled");>
<?=mk_option($cfg['filetypesf'],"no",'No')?>
<?=mk_option($cfg['filetypesf'],"yes","Yes")?>
</select>

comma seperated list of file types:
: <input type='text' name='filetypesv' size='1' class='narrow myfiletypesf' <?=$filetypesfDisabled?> value='<?=$cfg['filetypesv']?>'>

> A list of file types seperated by a comma.


Let scheduled mover run during a parity check / rebuild:
: <select name='parity' size='1' class='narrow'>
  <?=mk_option($cfg['parity'],'yes','Yes')?>
	<?=mk_option($cfg['parity'],'no','No')?>
</select>

> If a parity check or disk rebuild is in progress, this will prevent mover from running

Force turbo write on during mover:
: <select name='enableTurbo' size='1' class='narrow'>
<?=mk_option($cfg['enableTurbo'],"no","No")?>
<?=mk_option($cfg['enableTurbo'],"yes","Yes")?>
</select>

> Forces unRaid to switch to turbo write mode (reconstruct write) when mover is running

Log when not moving due to rules:
: <select name='logging' size='1' class='narrow'>
<?=mk_option($cfg['logging'],"no",'No')?>
<?=mk_option($cfg['logging'],"yes","Yes")?>
</select>

> Enables or disables logging from this plugin

Force move of all files on a schedule:
: <select name='force' size='1' id='forceCron' class='narrow' onchange=$(".mycron").toggleAttr("disabled");>
<?=mk_option($cfg['force'],"no",'No')?>
<?=mk_option($cfg['force'],"yes","Yes")?>
</select>

> Select yes to run original mover on a custom cron schedule.

Cron Schedule to force move all of files:
: <input type='text' id='cronSchedule' name='cron' size='1' class='narrow mycron' <?=$cronDisabled?> value='<?=$cfg['cron']?>'>

> Cron Schedule entry example 20 4 1 * *   To run the first day of the month at 4:20 AM  

Allow force mover schedule to run during a parity check/rebuild:
: <select name='forceParity' size='1' class='narrow mycron' <?=$cronDisabled?>>
<?=mk_option($cfg['forceParity'],"yes","Yes")?>
<?=mk_option($cfg['forceParity'],"no","No")?>
</select>

> Setting a cron schedule to force a move will run mover on that schedule.
> <br>Example: In Mover Settings you would have a schedule of Hourly.  During that schedule the rules above are followed.  The cron schedule for a force move could be set to <strong>30 03 * * *</strong> which would force all files to be moved at 3:30 AM every day regardless of the rules
> <br>Note that no error checking is done on the cron schedule.  It must be a valid entry.

Ignore All hiden files and directories
: <select name='ignoreHidden' size='1' class='narrow' >
<?=mk_option($cfg['ignoreHidden'],"no","No")?>
<?=mk_option($cfg['ignoreHidden'],"yes","Yes")?>
</select>

> Very few will use this, keep set to No.
> Removes any files or directories that start with a .
> Adds -not -path '*/\.*' to the end of the find command.


Script to run before mover (No checks, always runs):
: <input type='text' name='beforeScript' size='1' class='narrow mybefore' value='<?=$cfg['beforeScript']?>'>

> Path to a script that will be run before mover starts.  This script will always be run even if the filters don't find anything to move.


Script to run after mover (No checks, always runs):
: <input type='text' name='afterScript' size='1' class='narrow myafter' value='<?=$cfg['afterScript']?>'>

> Path to a script that will be run after mover finishes.  This script will always be run.

Move All from Cache-Yes shares when disk is above a certain percentage:
: <select name='omovercfg' size='1' class='narrow' onchange=$(".myomthresh").toggleAttr("disabled")>
<?=mk_option($cfg['omovercfg'],"yes","Yes")?>
<?=mk_option($cfg['omovercfg'],"no","No")?>
</select>

> Set to "Yes" if you want to move all files from a Cache-Yes share to the array if the percentage below is exceeded.  This is similar to the original mover and does not apply any filters from this plug-in to the find command sent to the mover binary.

Move All from Cache-yes shares pool percentage:

: <select name="omoverthresh" size="1" class='narrow myomthresh' <?=$omoverthreshDisabled?>>
<?for ($om;$om<=100;$om+=5):?>
<?=mk_option($cfg['omoverthresh'], $om, "$om %")?>
<?endfor;?>
</select>

> Set to the amount of disk space used on the cache pool to initiate a move of all files in a cache-yes share.  Filters will still run after, for any remaining pool's that do not meet this threshold.  This threshold should at a minimum be 5% larger than "Only move at this threshold of used cache space:" above. 


Move Now button follows plug-in filters:
: <select name='movenow' size='1' id='movenowbtn' class='narrow'>
<?=mk_option($cfg['movenow'],"no",'No')?>
<?=mk_option($cfg['movenow'],"yes","Yes")?>
</select>

> Select yes to to follow plug-in filters, no to run original mover from button.

Test Mode:
: <select name='testmode' size='1' class='narrow'>
<?=mk_option($cfg['testmode'],"no",'No')?>
<?=mk_option($cfg['testmode'],"yes","Yes")?>
</select>

> Test Mode will not run mover but output the custom find command the results.  Caution - If you have "Move Now button follows plug-in filters" set to no, Original Mover will still run.  



&nbsp;
: <input type="submit" name="#apply" value="Apply" id='Apply'><input type="button" id="DONE" value="Done" onclick="done()">
</form>
<span id='test'></span>
